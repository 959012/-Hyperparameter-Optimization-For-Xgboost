# -*- coding: utf-8 -*-
"""Untitled51.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NJqh2OD7Wakc2U0Iih6HCLhCixcGkdli
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from google.colab import files

uploaded = files.upload()

import io

mydata = pd.read_csv(io.BytesIO(uploaded['Churn_Modelling.csv']))

mydata.head()

corrmat = mydata.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(20,20))
g=sns.heatmap(mydata[top_corr_features].corr(),annot=True,cmap="RdYlGn")

mydata.columns

mydata.shape

mydata.info()

x = mydata.iloc[:,3:13]
y = mydata.iloc[:,13]

geography=pd.get_dummies(x['Geography'],drop_first=True)

geography.head()

gender=pd.get_dummies(x['Gender'],drop_first=True)

gender.head()

x = x.drop(['Gender','Geography'],axis=1)

x.head()

x = pd.concat ([x,geography,gender],axis=1)

x.head()

params={
 "learning_rate"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,
 "max_depth"        : [ 3, 4, 5, 6, 8, 10, 12, 15],
 "min_child_weight" : [ 1, 3, 5, 7 ],
 "gamma"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],
 "colsample_bytree" : [ 0.3, 0.4, 0.5 , 0.7 ]
    
}

from sklearn.model_selection import RandomizedSearchCV, GridSearchCV

import xgboost

model = xgboost.XGBClassifier()

random_search=RandomizedSearchCV(model,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)

random_search.fit(x,y)

x.head()

random_search.best_estimator_

random_search.best_params_

model =xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
              colsample_bynode=1, colsample_bytree=0.5, gamma=0.0,
              learning_rate=0.1, max_delta_step=0, max_depth=5,
              min_child_weight=7, missing=None, n_estimators=100, n_jobs=1,
              nthread=None, objective='binary:logistic', random_state=0,
              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
              silent=None, subsample=1, verbosity=1)

from sklearn.model_selection import cross_val_score
score = cross_val_score(model,x,y,cv=10)

score.mean()

